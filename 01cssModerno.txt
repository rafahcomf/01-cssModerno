**23/01/2023**

<inicio-CSS Moderno>:

CSS moderno +   > responsividade;
responsividade: >   flexbox;
                > grid;

São basicamente modificações e organizações de layout;

Responsividade: 
	> Visão geral sobre responsividade;
	> Entendendo e utilizando "media query"; 
	> Entendendo responsividade na prática -> Mobile first;

Flexbox:
	> O que é e para que serve;
	> Criando um layout de estudo;
	> Manipulando flex-container;
	> Exercicios de fixação 1;
	> Manipulando flex-itens;
	> Apresentando exercicios de flexbox;
	> Resolução de exercicios de flexbox;

Grid:
	> O que é e para que serve;
	> Modificando layout de estudos;
	> Manipulando grid-container;
	> Exercicio de fixação;
	> Manipulando linhas e colunas;
	> Apresentação exercicios de grid;
	> Resolvendo exercicios de grid;
	> Apresentação exercicios de grid e flexbox;
	> Resolvendo exercicio de grid e flexbox;

**24/01/2023**

<visão geral da responsividade>:

Responsividade nada mais é do que o "ajuste" do tamanho e layout da tela, de acordo com o dispositivo utilizado.

atalho F12 acessa o menu inspecionar.

é sempre bom deixar responsivo com no minimo 280px de largura.
A responsividade vem hoje como primordial, pensando em "mobile first".

<Entendendo Media Query>:

Aula sendo feita inicialmente no VScode.
o atalho "lorem35" nos trás lorens diferentes e aleatórios.
o 35 aponta o "tamanho".

configuração inicial para suposta responsividade a partir dos tablets:

.img-content {          (classe das imagens)
    width: 765px;
    height: 400px;
}

.text-content {          (classe dos textos)
    font-size: 22px;
    font-family: Arial, Helvetica, sans-serif;
}

utilizando o media query:

**compilado do site treinaWeb para explicação do media query que não ficou claro na aula do obc**

**O que são media queries?
Media query nada mais é do que uma estrutura do css que prmite aplicar estilizações especificas para uma página web de acordo com certas condições, fazendo com que esta pagina possa se adequar ao layout de tela em diferentes tamanhos e tipos de midia.**

Sintaxe básica:

@media (condição) {
	/* Estilizações CSS */
}

sintaxe utilizada aula:




Como funciona o Media Query?
Pelo que entendi: o media query são adaptações que informamos ao CSS para usar quando a "tela" for "abaixo de", ou quando for ajustado em acordo com a condição (que fica entre parenteses), ou seja: 

@media (max-width: 795px) {
  body {
	background-color: red;
  }
}

neste caso, parametrizamos que: 

abaixo de 795px, menor que 795px, todo o body ficara com o background em vermelho. Acima disso, manterá estilizações aplicadas no geral.

a partir disto, criamos outra media query para iniciar a partir dos 500px, porem, px (pixels) não é exatamente responsivo, então deveremos utilizar outra unidade de medida. Neste caso, utilizamos a porcentagem.

**nota do Rafa** 
No bootcamp do Dio, aprendi em responsividade que o correto para o CSS atual seria utilizar as medidas em "rem" por ser mais responsivo. 
Pesquisar sobre!**


**Entendendo a responsividade na prática**
<mobile first>

Mobile basico:
até 375 px (medium);
425 px (large);

Atenção ao tamanho das fontes em 320 px;

modo tablet: 
425 até 768 px;

no código, o tamanho maior do media query sempre deve ficar em cima, sempre de cima para baixo, do maior para o menor;

não existe "receita de bolo" para a responsividade, cada caso depende de um layout.

atentar em: 

começcar por 320px e deste, para o 425x;
dos 425px para os 790px;

a partir disto, nem sempre será necessário praticar a responsividade, até o 1024 (desktop large).
Na sequencia, diminuindo o zoom no inspecionar, vemos o 2560px (monitor 4k) que normalmente, seria mais interessante o conteudo centralizado, mais parecido com o de 425px.

desafio: criar um layout especifico para 1440px até 2560 px.

**27/01/23**

<Visão geral sobre o flexbox:>

O que é flex-container?
O flex container é um metodo de organização de layout que, com ele manipulamos itens dentro de um container de forma dinamica, ou seja, idenpendente do tamanho do container, os itens vão se adaptar a ele.
O flex box organiza o container em acordo com o dispositivo que o usuário está utilizando.
É muito utilizado quando queremos algo em formato de linha.

é muito utilizado também em headers e footers, como em barras de navegação.


<Criando um layout para estudos:>

***OBS: NA HORA DE LINKAR UM CSS, SEMPRE LEMBRAR DE INSERIR ./ ANTES DO STYLE.CSS**

./style.css

html:

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flexbox layout</title>
    <link rel="stylesheet" type="text/css" href="./sytle.css">
</head>

<body>
    <div class="container">
        <div class="item">
            <p>Item 1</p>
        </div>

        <div class="item">
            <p>Item 2</p>
        </div>

        <div class="item">
            <p>Item 3</p>
        </div>

    </div>

</body>

</html>

CSS:

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

essa seleção com o * é muito bom de se fazer no inicio de todo novo projeto para que todas as configurações de marging e padding sejam "zeradas";

box-sizing: é o modo como os itens da página são renderizados, e neste caso, utilizaremos o "border-box".
Deixa a pagina com alinhamentos melhores para utilizar novos paddings e margins.

https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing link mdn para o artigo box-sizing;

** unidade de medida vh**
abreviação de viewport height, ou altura de vizualização do usuário.
é mais responsivo que os pixels, na verdade pixels não é responsivo.

**30/01/2023**

Manipulando o flex-container:
display é a proriedade que define como nossos itens serão organizados em tela.

display: flex; (os itens ficam alinhados em linha;

flex-direction: colum; (os itens ficam alinhados em coluna)

flex-direction: colum-reverse; (os itens ficam alinhados em coluna, porém, do 					  ultimo para o primeiro item e, ao invés de 					        fixar ao "topo" da pagina, fica fixado no   				  		  bottom);

flex-direction: row; (é a seleção "padrão" do display: flex;, normalmente os 				    itens já vem alinhados em linha)

flex-direction: row-reverse; (os itens ficam alinhados em linha, porém do 						ultimo para o primeiro item e colados ao lado    				      direito da tela)

<Entendendo o gap:> 

O GAP nada mais é que o espaçamento entre os itens;
Quando os itens estão alinhados em coluna, cada item é considerado uma linha.

row-gap: 15px; (usado quando os itens estão configurados em coluna, altera 			    somente o espaçamento entre os itens, mas não altera o espaço    		    dos itens em relação ao body, diferente do marging ou 			  	    padding.)

colum-gap: 15px; (funciona da mesma maneira que o row-gap, porém garante o  				espaçamento dos itens, quando estes estão configurados em 				linha)

gap: 15px; (é como se fosse a junção de row-gap e colum-gap, adicionando 15px  		de distância entre os itens, tanto em configuração de linha, como 		em configuração de coluna)

gap: 0px 15px; (aponta que, para os itens configurados em coluna, o gap sera 			    de 0px e, para os itens configurados em linha, o gap sera de    		    15px, facilitando a inserção das configurações e diminuido as 	          linhas de código, porém, fica menos semântico)

<Entendendo o justify-content>:

justify-content: alinhamento horizontal dos itens do flex-container;

justify-content possui algumas propriedades como center, start e end;

o Start aponta o alinhamento no inicio da página e o end, no final, porém, ao utiliar tanto o start quanto o end, recomenda-se utilizar o parâmetro "flex-start" ou "flex-end", por conta da responsividade.

Deve-se lembrar que o parâmetro "flex-center" não existe, sendo este apontado como "center".

justify-content: space-around; (configura os itens para terem o mesmo   						  espaçamento tanto na esquerda, quanto na 						  direita, não importando o espaçamento que 	  			   	 	  terão entre eles, no "centro")

justify-content: space-between; (configura os itens para que fiquem o mais 						   separados possivel, colando o primeiro e o  						   ultimo item nas bordas e dividindo o espaço  					   restante em epaços iguais entre os itens.)

justify-content: space-evenly; (configura os itens para que tenham o mesmo 						  espaçamento entre si, não importando o 							  espaçamento das bordas, porém, é comum que 						  também nas bordas, fique com o mesmo espaço do 					  que o utilizado entre os itens.)
atenção:

utilizando o flex-direction com o parâmetro colum e, justify-content com o parâmentro center, não centralizará a coluna na tela de maneira vertical, apenas ficará centralizado na horizontal, mantendo os mesmos espaços entre o top e o bottom;

<entendendo o align-items:>

align-items: é basicamente a propriedade inversa do justify-content, alinhando os itens na tela de forma vertical;
ele também possui algumas propriedades distintas;

align-items: stretch; (em tradução livre, seria esticar, ou seja, esticar os 				     itens verticalmente para ocupar o espaço restante da 				     tela. Esse parâmetro só pode ser utilizado se a 					     propriedade "height" do item, a altura, não esteja 				     configurada ou seja ignorada dentro da descendência.)

para termos o alongamento horizontal dos itens, ou seja, alongarmos as linhas e não as colunas, podemos utilizar os seguintes parâmetros e propriedades:

na classe do container: 

flex-direction: colum;

na classe do item:

mantemos a configuração do height e zeramos a configuração do width;

para alinhamos a coluna no centro, utilizamos as propriedades na classe do container na seguinte forma:

flex-direction: colum;
justify-content: center;
align-items: center;

<entendendo o flex-wrap:>

o flex-wrap é a quebra dos nossos itens. Wrap, segundo o professor, significa quebra em sua tradução, mas não é, wrap é enrolar. 
esse cara tem uma didática estranha.

**nota: definição de flex-wrap segundo o mdn docs:**

A propriedade CSS flex-wrap define se os itens flexíveis são forçados a ficarem na mesma linha ou se podem ser quebradas em varias linhas. Se o argumento for valido, ele define a direção em que as linhas são empilhadas.


flex-wrap: a configuração padrão é "nowrap", que segundo ele é "não quebrar", ou seja, ele não vai quebrar a linha;

flex-wrap: wrap-reverse; (os itens da linha quebram para a responsividade, 					  porém, agrupando os itens do ultimo para o 						  primeiro.)

flex-wrap: wrap; (os itens quebram a linha para a responsividade, agrupando do 			primeiro ao ultimo, na posição vertical, em acordo com o 				equipamento usado pelo usuário;

<transformando flex-item em container:>

insere a proriedade display com o parametro flex dentro da classe do item, da seguinte forma:

.item {
    width: 200px;
    height: 200px;
    border: 2px solid black;
    background-color: white;
    display: flex;            **
    justify-content: center;  **
    align-items: center;      **
}

desta forma os itens se transformam em container e os paragrafos se transformam em itens.

<exercicio de fixação 1:>

exercicio de manipulação do flex-container.

Criar um header baseado no mockup;

feito com a resolução, segue codigo:

HTML: 

    <title>Exercicio Header - FlexContainer</title>
    <link rel="stylesheet" type="text/css" href="./style.css">
</head>

<body>
    <header class="header">

            <img src="./imgs/iconrock-red.svg" alt="icon-rock" class="icon-rock">
            <img src="./imgs/logo-onebitcode.svg" alt="logo-OBC" class="logo-OBC">

        <nav class="buttons">
            <button class="buttonHeader">
                Inicio
            </button>

            <button class="buttonHeader">
                FAQ
            </button>
                
            <button class="buttonHeader">
                Suporte                
            </button>

        </nav>

        
    </header>
    
</body>
</html>

CSS - manipulando o header:

* {                         (zerando parametros do body)
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.header {
    background-color: black;
    display: flex;
    justify-content: space-between;
    padding: 10px 25px;
    align-items: center;
}

.icon-rock {
    width: 40px;
}

.logo-OBC {
    width: 200px;
}

manipulando os botões:
observação: os botoes só foram juntos para o lado direito pois eles estão dentro de uma "div", ou seja: neste caso, o space-betweem foi usado e a tela foi dividida por 3 elementos: 
 >imagem do icone;
 >imagem do logo;
 >div dos botoes.

Ou seja: como ja aprendi, sempre é melhor dividir em "blocos" por uso, e isso se refletirá na aplicação do CSS, com menor quantidade de código por layout;



observação: a principio eu criei os botoes dentro de um "nav" e não dentro de uma "div". agora criarei dentro de uma section para ver os resultados.

os resultados dos botoes criados dentro de uma section foi igual ao criado em nav. manterei em section pois divs são MUITO genericas.

css botoes: 

.buttons {
    display: flex;
    gap: 10px;         (distância dos botões entre si)
}

.buttonHeader {
    border-radius: 10px;             (arredonda os cantos dos botões)
    background-color: transparent;   (auto explicaivo)
    border-color: white;             (cor da borda solida)
    color: white;				 (cor do texto do botão)
    font-size: 20px;			 (tamanho da donte do texto do botão)
    padding: 10px 15px;              (distância do texto do botão)
    cursor: pointer;			 (altera o ponteiro do mouse)
    transition: 0.4s;     		 (tempo de transição do hover)
}

.buttonHeader:hover {
    border-color: #ff0044;
}


*hover: cria uma transição da cor original da borda, neste caso, white, para a cor especificada na regra. 
neste caso o hover funciona com o apontamento do mouse sobre o botão, assim como o cursor, que altera apos ser posicionado no botão, mas com um atraso de 0.4 segundos, deixando a transição mais fluida. 

mais um ponto:

a section com a classe buttons serviu para que os 3 botoes ficassem dentro de um "container" e a classe buttonHeader serviu para que os 3 botões fossem manipulados ao mesmo tempo porque, apesar de textos diferentes, eles são iguais.


***31/01/2023***

<manipulando flex-items:>

Adicionar uma classe extra para cada item, não aplicando aos 3 itens a mesma classe;

(código na pasta do curso)

flex-basis: tamanho básico do item;
para ser utilizado, o parametro do width deve ser removido ou comentado;
(atalho alt + shift + a comenta a linha selecionada)

O flex-basis é muito importante pois usamos ele com outras funcionalidades:

<entendendo o flex-grow:>

o flex grow é uma forma que temos de aumentar o tamanho dos itens sem fazer com que eles quebrem de imediato;

por padrão, o flex-grow vem configurado como 0;

flex-grow é usado juntamente com outras propriedades flex flex-shrink e flex-basis, e normalmente definido usando o flex abreviação para garantir que todos os valores sejam definidos.

basicamente o flex-grow é desativado por padrão com o número 0 e ativado pelo número 1;

<entendendo o flex-shrink:>

o flex shrink está diretamente ligado a diminuição de cada item e, seu valor padrão inicial é 1;
o valor padrão 1 aponta que, todos os itens diminuirão de forma igual;

inserindo o valor 2 mostra que, o item 1 diminuirá menos que os outros dois itens que, diminuirão entre si de forma igual;

<entendendo o flex:>

é um atalho para o flex-basis, flex grow e flex shrink;

item-2 {
    flex: 1 0 200px;
}

explicando: 

1= flex-grow -> mostra que o item-2 ocupara todo o espaço que ele tiver disponivel;

0= flex-shrink -> apontando que o item não vai diminuir;

200px= flex-basis -> aponta que o flex-basis do item será de 200px;

funcionaría muito bem se dentro dos itens quisessemos colocar por exemplo o item-1 como header, o item-2 como corpo e o item-3 como footer;

é muito util usar desta maneira para responsividade para que ative o "scrool" da página;

<entendendo order:>

basicamente como o seu nome, o order manipula a ordem dos itens.
ele altera a ordem tanto com o alinhamento padrão "row", tanto com o alinhamento apontado em column;

<entendendo o align-self:>
funciona tanto com column quanto com row;
é muito util caso queiramos fazer modificações em apenas um item do container;

***01/02/2023***

<exercicio de fixação:>
apresentação do exercico de flex box:

header, footer e itens;
tudo deve ser responsivo até 4k;

é necessário tentar resolver antes de ver as repostas.

não consegui resolver :(

<explicação da resolução:>

o flex-basis 100% foi usado no lugar do width pois o item está dentro do container;
Quando usamos junto o flex ou flex-shrink, ai sim usamos o width;


***02/02/2023***

<conhecendo o grid:>

O grid é um organizado de layout, com ele teremos uma divisão de linhas e colunas, diferente da que temos com o flexbox.
Acaba sendo mais especifica e organizada;

O grid serve para ter linhas e colunas.

Mesmo com a facilidade de manipulação do layout de pagina, o grid não é a melhor forma de criarmos e manipularmos Header e Footer, e sim a melhor forma de usar é pelas classes header e footer, em contanineres separados.

O grid será utilizado quando queremos conteudo dividido com linhas e colunas, como o side bar ou algo assim.
Serve também para separarmos conteúdo e, assim como o flexbox, temos a quebra quando a tela vai diminuindo, ou seja, é responsivo também.

Modificando o layout de estudos para o Grid.

<manipulando css grid:>

definição das colunas do grid: 
grid-template-columns: 25% 50% 25% -> mostra que: no grid do "template" serão 3 colunas: a primeira, da esquerda para a direita, com 25% de ocupação do espaço, a segunda, do meio, com 50%, e a terceira, da direita, com 25%.

Sempre é bom utilizarmos porcentagem ou frames; não usaremos pixels porque não são responsivos.

Frames-> são "pedaços" da tela que daremos para cada item, neste caso, as colunas;

cada frame equivale a 25% da "tela", neste caso:

grid-template-columns: 1fr 2fr 1fr;

a cada frame ou porcentagem adicionada, será inserida mais uma coluna no grid.

existe uma forma mais prática de inserir essas unidades no CSS, que é usando o "repeat":

grid-template-columns: repeat(3, 1fr);

significa o que: que é para repetir 3 vezes, ou seja, 3 colunas de 1 frame.
somente para colunas com o mesmo frame, ou seja, com a mesma "medida";

definição das LINHAS do grid:

grid-template-rows: é bem semelhante ao template columns:
grid-template-rows: 1fr 2fr 1fr;

teremos 3 linhas: a primra com 1fr (frame), a segunda, central, com 2fr e a terceira com 1fr.

grid-auto-rows: 210px; configura todas as linhas com 210px automaticamente, porém, quebram o texto.




<entendendo o gap:>
é basicamente a mesma coisa do flex-box, com a diferença que temos:
row-gap: gap de linha;
column-gap: gap de coluna;
gap: que é o gap geral e um atalho para os dois;

em resumo:
gap: 10px 15px aplica 10px de distância entre as linhas e 15px de distância entre as colunas;
















